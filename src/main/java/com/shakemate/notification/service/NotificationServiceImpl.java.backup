package com.shakemate.notification.service;

import com.shakemate.notification.dto.NotificationDto;
import com.shakemate.notification.dto.NotificationCreateDto;
import com.shakemate.notification.dto.MemberNotificationDto;
import com.shakemate.notification.entity.Notification;
import com.shakemate.notification.entity.NotificationTemplate;
import com.shakemate.notification.entity.MemberNotification;
import com.shakemate.notification.entity.MemberNotificationId;
import com.shakemate.notification.enums.DeliveryStatus;
import com.shakemate.notification.enums.NotificationStatus;
import com.shakemate.notification.repository.NotificationRepository;
import com.shakemate.notification.repository.NotificationTemplateRepository;
import com.shakemate.notification.repository.MemberNotificationRepository;
import com.shakemate.notification.repository.NotificationPreferenceRepository;
import com.shakemate.notification.util.NotificationMapper;
import com.shakemate.user.model.Users;
import com.shakemate.user.dao.UsersRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * 通知服務實現類 - 提供完整的業務模組對接能力
 * 支援配對、聊天室、活動、訂單、商店、新聞、服務案件、用戶管理等8個業務模組
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository notificationRepository;
    private final NotificationTemplateRepository templateRepository;
    private final MemberNotificationRepository memberNotificationRepository;
    private final NotificationPreferenceRepository preferenceRepository;
    private final NotificationDispatchService dispatchService;
    private final UsersRepository usersRepository;
    private final NotificationMapper notificationMapper;

    // 變數替換的正則表達式
    private static final Pattern VARIABLE_PATTERN = Pattern.compile("\\{\\{([^}]+)\\}\\}");

    // ==================== 核心業務對接方法實現 ====================

    @Override
    @Async
    public CompletableFuture<Boolean> sendTemplateNotification(String templateCode, Integer userId, Map<String, Object> variables) {
        try {
            log.info("發送模板通知: templateCode={}, userId={}", templateCode, userId);
            
            // 1. 查找模板
            NotificationTemplate template = templateRepository.findByTemplateCode(templateCode)
                .orElseThrow(() -> new RuntimeException("找不到模板: " + templateCode));
            
            // 2. 檢查用戶偏好
            if (!checkUserPreference(userId, template.getTemplateCategory())) {
                log.info("用戶 {} 不接收 {} 類型通知", userId, template.getTemplateCategory());
                return CompletableFuture.completedFuture(true);
            }
            
            // 3. 創建通知記錄
            Notification notification = createNotificationFromTemplate(template, variables);
            notification = notificationRepository.save(notification);
            
            // 4. 處理模板變數替換並發送
            return sendNotificationToUser(notification, template, userId, variables);
            
        } catch (Exception e) {
            log.error("發送模板通知失敗: templateCode={}, userId={}", templateCode, userId, e);
            return CompletableFuture.completedFuture(false);
        }
    }

    @Override
    @Async
    public CompletableFuture<Boolean> sendTemplateNotificationToUsers(String templateCode, List<Integer> userIds, Map<String, Object> variables) {
        try {
            log.info("批量發送模板通知: templateCode={}, userCount={}", templateCode, userIds.size());
            
            // 1. 查找模板
            NotificationTemplate template = templateRepository.findByTemplateCode(templateCode)
                .orElseThrow(() -> new RuntimeException("找不到模板: " + templateCode));
            
            // 2. 過濾用戶偏好
            List<Integer> filteredUserIds = userIds.stream()
                .filter(userId -> checkUserPreference(userId, template.getTemplateCategory()))
                .collect(Collectors.toList());
            
            if (filteredUserIds.isEmpty()) {
                log.info("所有用戶都不接收 {} 類型通知", template.getTemplateCategory());
                return CompletableFuture.completedFuture(true);
            }
            
            // 3. 創建通知記錄
            Notification notification = createNotificationFromTemplate(template, variables);
            notification = notificationRepository.save(notification);
            
            // 4. 批量發送
            List<CompletableFuture<Boolean>> futures = filteredUserIds.stream()
                .map(userId -> sendNotificationToUser(notification, template, userId, variables))
                .collect(Collectors.toList());
            
            // 5. 等待所有發送完成
            CompletableFuture<Void> allOf = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
            return allOf.thenApply(v -> futures.stream().allMatch(f -> {
                try {
                    return f.get();
                } catch (Exception e) {
                    return false;
                }
            }));
            
        } catch (Exception e) {
            log.error("批量發送模板通知失敗: templateCode={}, userIds={}", templateCode, userIds, e);
            return CompletableFuture.completedFuture(false);
        }
    }

    @Override
    @Async
    public CompletableFuture<Boolean> sendInstantNotification(Integer userId, String title, String content, 
                                                             String notificationType, List<String> deliveryMethods) {
        try {
            log.info("發送即時通知: userId={}, type={}", userId, notificationType);
            
            // 1. 創建即時通知記錄
            Notification notification = Notification.builder()
                .notificationType(notificationType)
                .notificationCategory("即時通知")
                .notificationLevel(1)
                .notificationTitle(title)
                .notificationContent(content)
                .isBroadcast(false)
                .validFrom(LocalDateTime.now())
                .createdTime(LocalDateTime.now())
                .updatedTime(LocalDateTime.now())
                .admId(1) // 系統發送
                .notiStatus(NotificationStatus.PUBLISHED.getCode())
                .build();
            
            notification = notificationRepository.save(notification);
            
            // 2. 創建用戶通知記錄並發送
            for (String deliveryMethod : deliveryMethods) {
                if (checkUserPreferenceForMethod(userId, notificationType, deliveryMethod)) {
                    createMemberNotificationRecord(notification.getNotificationId(), userId, deliveryMethod);
                    dispatchService.sendNotification(userId, title, content, deliveryMethod);
                }
            }
            
            return CompletableFuture.completedFuture(true);
            
        } catch (Exception e) {
            log.error("發送即時通知失敗: userId={}", userId, e);
            return CompletableFuture.completedFuture(false);
        }
    }

    @Override
    @Async
    public CompletableFuture<Boolean> broadcastTemplateNotification(String templateCode, Map<String, Object> variables, 
                                                                   Map<String, Object> targetCriteria) {
        try {
            log.info("廣播模板通知: templateCode={}", templateCode);
            
            // 1. 查找模板
            NotificationTemplate template = templateRepository.findByTemplateCode(templateCode)
                .orElseThrow(() -> new RuntimeException("找不到模板: " + templateCode));
            
            // 2. 獲取目標用戶列表
            List<Integer> targetUserIds = getTargetUserIds(targetCriteria);
            
            // 3. 創建廣播通知記錄
            Notification notification = createNotificationFromTemplate(template, variables);
            notification.setIsBroadcast(true);
            if (targetCriteria != null && !targetCriteria.isEmpty()) {
                notification.setTargetCriteria(convertToJson(targetCriteria));
            }
            notification = notificationRepository.save(notification);
            
            // 4. 批量發送
            return sendTemplateNotificationToUsers(templateCode, targetUserIds, variables);
            
        } catch (Exception e) {
            log.error("廣播模板通知失敗: templateCode={}", templateCode, e);
            return CompletableFuture.completedFuture(false);
        }
    }

    @Override
    @Async
    public CompletableFuture<Boolean> sendConditionalNotification(String templateCode, Map<String, Object> variables, 
                                                                 Map<String, Object> targetCriteria) {
        try {
            log.info("條件篩選發送通知: templateCode={}, criteria={}", templateCode, targetCriteria);
            
            // 1. 根據條件篩選用戶
            List<Integer> targetUserIds = getTargetUserIds(targetCriteria);
            
            if (targetUserIds.isEmpty()) {
                log.info("沒有符合條件的用戶: {}", targetCriteria);
                return CompletableFuture.completedFuture(true);
            }
            
            // 2. 發送給篩選出的用戶
            return sendTemplateNotificationToUsers(templateCode, targetUserIds, variables);
            
        } catch (Exception e) {
            log.error("條件篩選發送通知失敗: templateCode={}, criteria={}", templateCode, targetCriteria, e);
            return CompletableFuture.completedFuture(false);
        }
    }

    @Override
    public NotificationBuilder createNotificationBuilder() {
        return new NotificationBuilderImpl();
    }

    // ==================== 建構器模式實現 ====================
    
    public class NotificationBuilderImpl implements NotificationBuilder {
        private String templateCode;
        private String title;
        private String content;
        private String htmlContent;
        private String notificationType;
        private String notificationCategory;
        private Integer notificationLevel = 1;
        private List<Integer> targetUserIds = new ArrayList<>();
        private Map<String, Object> variables = new HashMap<>();
        private List<String> deliveryMethods = Arrays.asList("PUSH", "EMAIL");
        private LocalDateTime validFrom = LocalDateTime.now();
        private LocalDateTime validUntil;
        private Integer priority = 1;

        @Override
        public NotificationBuilder templateCode(String templateCode) {
            this.templateCode = templateCode;
            return this;
        }

        @Override
        public NotificationBuilder title(String title) {
            this.title = title;
            return this;
        }

        @Override
        public NotificationBuilder content(String content) {
            this.content = content;
            return this;
        }

        @Override
        public NotificationBuilder htmlContent(String htmlContent) {
            this.htmlContent = htmlContent;
            return this;
        }

        @Override
        public NotificationBuilder notificationType(String type) {
            this.notificationType = type;
            return this;
        }

        @Override
        public NotificationBuilder notificationCategory(String category) {
            this.notificationCategory = category;
            return this;
        }

        @Override
        public NotificationBuilder notificationLevel(Integer level) {
            this.notificationLevel = level;
            return this;
        }

        @Override
        public NotificationBuilder targetUsers(List<Integer> userIds) {
            this.targetUserIds = new ArrayList<>(userIds);
            return this;
        }

        @Override
        public NotificationBuilder targetUser(Integer userId) {
            this.targetUserIds.add(userId);
            return this;
        }

        @Override
        public NotificationBuilder variables(Map<String, Object> variables) {
            this.variables = new HashMap<>(variables);
            return this;
        }

        @Override
        public NotificationBuilder deliveryMethods(List<String> methods) {
            this.deliveryMethods = new ArrayList<>(methods);
            return this;
        }

        @Override
        public NotificationBuilder validFrom(LocalDateTime validFrom) {
            this.validFrom = validFrom;
            return this;
        }

        @Override
        public NotificationBuilder validUntil(LocalDateTime validUntil) {
            this.validUntil = validUntil;
            return this;
        }

        @Override
        public NotificationBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }

        @Override
        @Async
        public CompletableFuture<Boolean> send() {
            try {
                if (templateCode != null && !templateCode.isEmpty()) {
                    // 使用模板發送
                    return sendTemplateNotificationToUsers(templateCode, targetUserIds, variables);
                } else {
                    // 使用即時通知發送
                    List<CompletableFuture<Boolean>> futures = targetUserIds.stream()
                        .map(userId -> sendInstantNotification(userId, title, content, notificationType, deliveryMethods))
                        .collect(Collectors.toList());
                    
                    CompletableFuture<Void> allOf = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
                    return allOf.thenApply(v -> futures.stream().allMatch(f -> {
                        try {
                            return f.get();
                        } catch (Exception e) {
                            return false;
                        }
                    }));
                }
            } catch (Exception e) {
                log.error("建構器發送通知失敗", e);
                return CompletableFuture.completedFuture(false);
            }
        }
    }

    // ==================== 私有輔助方法 ====================

    /**
     * 從模板創建通知記錄
     */
    private Notification createNotificationFromTemplate(NotificationTemplate template, Map<String, Object> variables) {
        String processedTitle = replaceVariables(template.getTitleTemplate(), variables);
        String processedContent = replaceVariables(
            template.getContentTemplate() != null ? template.getContentTemplate() : 
            (template.getHtmlTemplate() != null ? stripHtmlTags(template.getHtmlTemplate()) : ""), 
            variables
        );

        return Notification.builder()
            .notificationType(template.getTemplateType())
            .notificationCategory(template.getTemplateCategory())
            .notificationLevel(1)
            .title(processedTitle)
            .message(processedContent)
            .isBroadcast(false)
            .validFrom(LocalDateTime.now())
            .createdTime(LocalDateTime.now())
            .updatedTime(LocalDateTime.now())
            .createdBy(1) // 系統發送
            .status(1) // NotificationStatus.PUBLISHED.getCode()
            .build();
    }

    /**
     * 發送通知給單一用戶
     */
    @Async
    private CompletableFuture<Boolean> sendNotificationToUser(Notification notification, NotificationTemplate template, 
                                                             Integer userId, Map<String, Object> variables) {
        try {
            // 1. 獲取用戶偏好的發送方式
            List<String> enabledMethods = getEnabledDeliveryMethods(userId, template.getTemplateCategory());
            
            // 2. 根據模板類型智能選擇內容
            for (String method : enabledMethods) {
                String content = selectBestContentForMethod(template, method, variables);
                String title = replaceVariables(template.getSubject(), variables);
                
                // 3. 創建發送記錄
                createMemberNotificationRecord(notification.getNotificationId(), userId, method);
                
                // 4. 發送通知
                dispatchService.sendNotification(userId, title, content, method);
            }
            
            return CompletableFuture.completedFuture(true);
            
        } catch (Exception e) {
            log.error("發送通知給用戶失敗: userId={}", userId, e);
            return CompletableFuture.completedFuture(false);
        }
    }

    /**
     * 智能選擇最適合的模板內容
     */
    private String selectBestContentForMethod(NotificationTemplate template, String method, Map<String, Object> variables) {
        String content;
        
        if ("EMAIL".equals(method)) {
            // EMAIL 類型：優先 HTML，回退到純文字
            content = template.getHtmlContent() != null && !template.getHtmlContent().trim().isEmpty() 
                ? template.getHtmlContent() 
                : template.getContentTemplate();
        } else {
            // 其他類型：優先純文字，回退到 HTML（去除標籤）
            content = template.getContentTemplate() != null && !template.getContentTemplate().trim().isEmpty() 
                ? template.getContentTemplate() 
                : (template.getHtmlContent() != null ? stripHtmlTags(template.getHtmlTemplate()) : "");
        }
        
        return replaceVariables(content != null ? content : "", variables);
    }

    /**
     * 變數替換處理
     */
    private String replaceVariables(String template, Map<String, Object> variables) {
        if (template == null || variables == null) {
            return template;
        }

        Matcher matcher = VARIABLE_PATTERN.matcher(template);
        StringBuffer result = new StringBuffer();

        while (matcher.find()) {
            String variableName = matcher.group(1);
            Object value = variables.get(variableName);
            String replacement = value != null ? value.toString() : "{{" + variableName + "}}";
            matcher.appendReplacement(result, Matcher.quoteReplacement(replacement));
        }
        matcher.appendTail(result);

        return result.toString();
    }

    /**
     * 移除 HTML 標籤
     */
    private String stripHtmlTags(String html) {
        if (html == null) return null;
        
        return html
            .replaceAll("<[^>]*>", "") // 移除所有 HTML 標籤
            .replaceAll("&nbsp;", " ") // 替換空格實體
            .replaceAll("&amp;", "&")  // 替換 & 實體
            .replaceAll("&lt;", "<")   // 替換 < 實體
            .replaceAll("&gt;", ">")   // 替換 > 實體
            .replaceAll("&quot;", "\"") // 替換引號實體
            .replaceAll("\\s+", " ")   // 合併多個空白字符
            .trim();
    }

    /**
     * 檢查用戶偏好
     */
    private boolean checkUserPreference(Integer userId, String category) {
        // 實現用戶偏好檢查邏輯
        // 查詢 NOTIFICATION_PREFERENCE 表
        return true; // 暫時返回 true，實際實現需要查詢數據庫
    }

    /**
     * 檢查用戶對特定發送方式的偏好
     */
    private boolean checkUserPreferenceForMethod(Integer userId, String category, String method) {
        // 實現用戶偏好檢查邏輯
        return true; // 暫時返回 true，實際實現需要查詢數據庫
    }

    /**
     * 獲取用戶啟用的發送方式
     */
    private List<String> getEnabledDeliveryMethods(Integer userId, String category) {
        // 實現獲取用戶偏好的發送方式
        return Arrays.asList("PUSH", "EMAIL"); // 暫時返回默認值
    }

    /**
     * 創建會員通知記錄
     */
    private void createMemberNotificationRecord(Integer notificationId, Integer userId, String deliveryMethod) {
        MemberNotification memberNotification = MemberNotification.builder()
            .id(new MemberNotificationId(notificationId, userId))
            .isRead(false)
            .sentTime(LocalDateTime.now())
            .deliveryMethod(deliveryMethod)
            .deliveryStatus(DeliveryStatus.PENDING)
            .retryCount(0)
            .userInteraction(0)
            .build();
        
        memberNotificationRepository.save(memberNotification);
    }

    /**
     * 根據條件獲取目標用戶ID列表
     */
    private List<Integer> getTargetUserIds(Map<String, Object> targetCriteria) {
        if (targetCriteria == null || targetCriteria.isEmpty()) {
            // 返回所有活躍用戶
            return userRepository.findAll().stream()
                .map(User::getUserId)
                .collect(Collectors.toList());
        }
        
        // 實現條件篩選邏輯
        // 這裡可以根據具體的篩選條件來實現
        return Arrays.asList(1, 2, 3, 4, 5); // 暫時返回示例數據
    }

    /**
     * 將Map轉換為JSON字符串
     */
    private String convertToJson(Map<String, Object> map) {
        // 實現Map到JSON的轉換
        // 可以使用Jackson或其他JSON庫
        return "{}"; // 暫時返回空JSON
    }

    // ==================== 原有方法的實現 ====================

    @Override
    public Notification createNotificationForUser(NotificationCreateDto notificationCreateDto, Integer userId) {
        // 實現原有方法
        return null;
    }

    @Override
    public List<Notification> createNotificationForUsers(NotificationCreateDto notificationCreateDto, List<Integer> userIds) {
        // 實現原有方法
        return new ArrayList<>();
    }

    @Override
    public Page<NotificationDto> getUserNotifications(Integer userId, Pageable pageable) {
        // 實現原有方法
        return Page.empty();
    }

    @Override
    public NotificationDto markAsRead(Integer notificationId, Integer userId) {
        // 實現原有方法
        return null;
    }

    @Override
    public void markAllAsRead(Integer userId) {
        // 實現原有方法
    }

    @Override
    public Long getUnreadCount(Integer userId) {
        // 實現原有方法
        return 0L;
    }

    @Override
    public Page<NotificationDto> getNotificationsByCategory(Integer userId, String category, Pageable pageable) {
        // 實現原有方法
        return Page.empty();
    }

    @Override
    public void deleteNotification(Integer notificationId, Integer userId) {
        // 實現原有方法
    }

    @Override
    public Page<NotificationDto> searchNotifications(Integer userId, String keyword, Pageable pageable) {
        // 實現原有方法
        return Page.empty();
    }

    @Override
    public Page<NotificationDto> getNotificationsForUser(Integer userId, Pageable pageable) {
        // 實現原有方法
        return Page.empty();
    }

    @Override
    public Page<MemberNotificationDto> getMemberNotifications(Integer userId, Pageable pageable) {
        // 實現原有方法
        return Page.empty();
    }

    @Override
    public Page<MemberNotificationDto> getUnreadMemberNotifications(Integer userId, Pageable pageable) {
        // 實現原有方法
        return Page.empty();
    }
}
